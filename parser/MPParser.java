
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 26 16:26:16 CET 2022
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.MPLexer;

import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 26 16:26:16 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\006\000\002\007\005\000\002\010\011\000\002\010\007" +
    "\000\002\010\007\000\002\011\007\000\002\012\007\000" +
    "\002\013\010\000\002\014\004\000\002\015\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\002\000\002\017" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\002" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\004\000\002\023\004\000\002\023\002\000\002\024" +
    "\005\000\002\024\002\000\002\025\004\000\002\025\002" +
    "\000\002\026\005\000\002\026\002\000\002\027\006\000" +
    "\002\030\005\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\003\006\036\005\001\002\000\004\002" +
    "\152\001\002\000\024\003\ufffa\004\024\005\025\006\021" +
    "\010\011\011\013\012\023\013\027\037\ufffa\001\002\000" +
    "\024\002\uffff\004\024\005\025\006\021\010\011\011\013" +
    "\012\023\013\027\037\ufffa\001\002\000\004\002\001\001" +
    "\002\000\024\003\ufff8\004\ufff8\005\ufff8\006\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\037\ufff8\001\002\000\004\016" +
    "\143\001\002\000\024\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\037\ufff3\001\002\000" +
    "\004\005\133\001\002\000\004\037\132\001\002\000\024" +
    "\003\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\037\ufff4\001\002\000\024\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\037" +
    "\ufff5\001\002\000\024\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\037\ufff7\001\002\000" +
    "\024\003\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\037\ufff6\001\002\000\004\016\111\001" +
    "\002\000\024\003\ufffa\004\024\005\025\006\021\010\011" +
    "\011\013\012\023\013\027\037\ufffa\001\002\000\004\005" +
    "\075\001\002\000\004\016\072\001\002\000\004\015\070" +
    "\001\002\000\024\003\ufff9\004\ufff9\005\ufff9\006\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\037\ufff9\001\002\000\012" +
    "\005\034\016\035\034\037\035\030\001\002\000\060\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\036\uffe0\037\uffe0\001\002\000\054\003\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\062\023\063\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\036\uffe6\037\uffe6" +
    "\001\002\000\060\003\uffe2\004\uffe2\005\uffe2\006\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\054\025\053\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\036\uffe2\037\uffe2\001\002" +
    "\000\024\003\uffea\004\uffea\005\uffea\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\037\uffea\001\002\000\062\003\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\016\042\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\036\uffe1\037\uffe1\001\002\000\012\005\034" +
    "\016\035\034\037\035\030\001\002\000\060\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\036\uffdd\037\uffdd\001\002\000\060\003\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\001\002\000\004\017\041\001\002\000\060\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\036\uffde\037\uffde\001\002\000\014\005\034\016" +
    "\035\017\uffd5\034\037\035\030\001\002\000\006\017\uffd3" +
    "\021\046\001\002\000\004\017\045\001\002\000\060\003" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\036\uffd2\037\uffd2\001\002\000\012\005\034\016" +
    "\035\034\037\035\030\001\002\000\004\017\uffd6\001\002" +
    "\000\006\017\uffd3\021\046\001\002\000\004\017\uffd4\001" +
    "\002\000\054\003\uffe5\004\uffe5\005\uffe5\006\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\036\uffe5\037\uffe5\001\002\000\012\005\034\016" +
    "\035\034\037\035\030\001\002\000\012\005\034\016\035" +
    "\034\037\035\030\001\002\000\060\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\054\025\053\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\036\uffe2" +
    "\037\uffe2\001\002\000\054\003\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\036\uffe4\037\uffe4\001\002\000\060" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\054\025\053\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\036\uffe2\037\uffe2\001\002\000\054\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\036\uffe3\037" +
    "\uffe3\001\002\000\050\003\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\036\uffe9\037\uffe9\001\002\000\012\005\034\016\035\034" +
    "\037\035\030\001\002\000\012\005\034\016\035\034\037" +
    "\035\030\001\002\000\054\003\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\062\023\063\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\036\uffe6\037\uffe6\001\002\000\050" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\017\uffe7\020\uffe7\021\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\036\uffe7\037\uffe7\001" +
    "\002\000\054\003\uffe6\004\uffe6\005\uffe6\006\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\062\023\063\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\036\uffe6\037\uffe6\001\002\000\050\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\001\002\000\012" +
    "\005\034\016\035\034\037\035\030\001\002\000\024\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\037\ufff1\001\002\000\012\005\034\016\035\034" +
    "\037\035\030\001\002\000\004\017\074\001\002\000\024" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\037\ufff2\001\002\000\004\016\076\001\002" +
    "\000\006\005\100\017\uffd9\001\002\000\004\017\105\001" +
    "\002\000\006\017\uffd7\021\101\001\002\000\004\005\103" +
    "\001\002\000\004\017\uffda\001\002\000\006\017\uffd7\021" +
    "\101\001\002\000\004\017\uffd8\001\002\000\006\003\106" +
    "\036\005\001\002\000\022\004\024\005\025\006\021\010" +
    "\011\011\013\012\023\013\027\037\ufffa\001\002\000\024" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\037\uffeb\001\002\000\006\003\ufffb\037\ufffb" +
    "\001\002\000\012\005\034\016\035\034\037\035\030\001" +
    "\002\000\004\017\125\001\002\000\020\003\117\026\122" +
    "\027\115\030\121\031\123\032\116\033\120\001\002\000" +
    "\012\005\034\016\035\034\037\035\030\001\002\000\012" +
    "\005\uffce\016\uffce\034\uffce\035\uffce\001\002\000\012\005" +
    "\uffcb\016\uffcb\034\uffcb\035\uffcb\001\002\000\004\017\uffd0" +
    "\001\002\000\012\005\uffca\016\uffca\034\uffca\035\uffca\001" +
    "\002\000\012\005\uffcd\016\uffcd\034\uffcd\035\uffcd\001\002" +
    "\000\012\005\uffcf\016\uffcf\034\uffcf\035\uffcf\001\002\000" +
    "\012\005\uffcc\016\uffcc\034\uffcc\035\uffcc\001\002\000\004" +
    "\017\uffd1\001\002\000\024\003\106\004\024\005\025\006" +
    "\021\010\011\011\013\012\023\013\027\036\005\001\002" +
    "\000\026\003\uffef\004\uffef\005\uffef\006\uffef\007\130\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\037\uffef\001\002\000\024" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\037\uffee\001\002\000\006\003\106\036\005" +
    "\001\002\000\024\003\ufff0\004\ufff0\005\ufff0\006\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\037\ufff0\001\002\000\030" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\037\ufffd\001\002\000\004" +
    "\014\134\001\002\000\012\005\034\016\035\034\037\035" +
    "\030\001\002\000\006\003\106\036\005\001\002\000\006" +
    "\003\137\020\140\001\002\000\006\003\uffdb\036\uffdb\001" +
    "\002\000\012\005\034\016\035\034\037\035\030\001\002" +
    "\000\006\003\uffdc\036\uffdc\001\002\000\024\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\037\uffec\001\002\000\012\005\034\016\035\034\037\035" +
    "\030\001\002\000\004\017\145\001\002\000\006\003\106" +
    "\036\005\001\002\000\024\003\uffed\004\uffed\005\uffed\006" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\037\uffed\001\002" +
    "\000\006\003\150\037\151\001\002\000\030\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\037\ufffc\001\002\000\030\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\037\ufffe\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\024\004\146\005\021\006\025\007\007\010\016" +
    "\011\017\012\015\013\014\014\011\001\001\000\024\004" +
    "\013\005\021\006\025\007\007\010\016\011\017\012\015" +
    "\013\014\014\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\107\005\021\006\025\007\007\010\016\011\017\012" +
    "\015\013\014\014\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\032\017\030\021\031\027\035\001\001\000\002\001\001" +
    "\000\004\016\060\001\001\000\004\020\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\037\017\030" +
    "\021\031\027\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\042" +
    "\017\030\021\031\025\043\027\035\001\001\000\004\026" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\047\017\030\021\031\027\035\001\001\000\002\001" +
    "\001\000\004\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\056\027\035\001\001\000\006\021" +
    "\054\027\035\001\001\000\004\020\055\001\001\000\002" +
    "\001\001\000\004\020\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\065\021\031\027\035\001\001" +
    "\000\010\017\063\021\031\027\035\001\001\000\004\016" +
    "\064\001\001\000\002\001\001\000\004\016\066\001\001" +
    "\000\002\001\001\000\012\015\070\017\030\021\031\027" +
    "\035\001\001\000\002\001\001\000\012\015\072\017\030" +
    "\021\031\027\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\076\001\001\000\002" +
    "\001\001\000\004\024\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\103\001\001\000\002\001\001" +
    "\000\004\003\106\001\001\000\024\004\013\005\021\006" +
    "\025\007\007\010\016\011\017\012\015\013\014\014\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\112\017\030\021\031\027\035\030\111\001\001\000\002" +
    "\001\001\000\004\031\113\001\001\000\012\015\123\017" +
    "\030\021\031\027\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\125\005\126\006\025\007\007\010\016\011" +
    "\017\012\015\013\014\014\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\135" +
    "\017\030\021\031\022\134\027\035\001\001\000\004\003" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\140\017\030\021\031\027\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\112\017\030\021\031" +
    "\027\035\030\143\001\001\000\002\001\001\000\004\003" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int errNo = 0;

    public static void main(String[] args)
    {
        try {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MPLexer(file);
            MPParser parser = new MPParser(scanner);
            parser.parse();
            if (parser.errNo == 0) {
                System.out.println("Parse successful");
            } else {
                System.out.println("Parse failed: " + parser.errNo + " errors");
            }
        } catch (Exception e) {
            System.out.println("Parse failed");
            e.printStackTrace();
        }
    }

    public int getLine() {
        return ((MPLexer) getScanner()).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RelOp ::= GREATEREQUAL 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 50");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelOp ::= GREATER 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 49");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelOp ::= NOTEQUAL 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 48");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelOp ::= EQUAL 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 47");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= LESSEQUAL 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 46");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= LESS 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 45");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelationalExpression ::= Expression error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
    System.out.println("Relational expression missing operator on line: " + parser.getLine() + ": " + e);
    parser.errNo++;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelationalExpression ::= Expression RelOp Expression 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 44");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",22, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FunctionCall ::= IDENTIFIER LPAREN ActualParameters RPAREN 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 43");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",21, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ActualParametersTail ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 42");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ActualParametersTail",20, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ActualParametersTail ::= COMMA Expression ActualParametersTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 41");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ActualParametersTail",20, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ActualParameters ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 40");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ActualParameters",19, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ActualParameters ::= Expression ActualParametersTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 39");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ActualParameters",19, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormalParametersTail ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 38");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("FormalParametersTail",18, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalParametersTail ::= COMMA IDENTIFIER FormalParametersTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 37");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("FormalParametersTail",18, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalParameters ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 36");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("FormalParameters",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParameters ::= IDENTIFIER FormalParametersTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 35");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("FormalParameters",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Range ::= Expression error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
    System.out.println("Range missing colon on line: " + parser.getLine() + ": " + e);
    parser.errNo++;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Range",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Range ::= Expression COLON Expression 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 34");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Range",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Factor ::= FunctionCall 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 33");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Factor ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 32");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Factor ::= CHARCONST 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 31");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Factor ::= INTCONST 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 30");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 29");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TermTail ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 28");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("TermTail",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TermTail ::= DIVIDE Factor TermTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 27");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("TermTail",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TermTail ::= MULTIPLY Factor TermTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 26");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("TermTail",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Term ::= Factor TermTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 25");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpressionTail ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 24");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionTail",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExpressionTail ::= MINUS Term ExpressionTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 23");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionTail",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExpressionTail ::= PLUS Term ExpressionTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 22");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionTail",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= Term ExpressionTail 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 21");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ReturnStatement ::= RETURN Expression 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 20");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDefinition ::= DEF IDENTIFIER LPAREN FormalParameters RPAREN Block 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 19");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ForStatement ::= FOR IDENTIFIER IN Range Block 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 18");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ForStatement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // WhileStatement ::= WHILE LPAREN RelationalExpression RPAREN Block 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 17");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("WhileStatement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IfStatement ::= IF LPAREN RelationalExpression RPAREN Statement 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 16");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IfStatement ::= IF LPAREN RelationalExpression RPAREN Block 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 15");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IfStatement ::= IF LPAREN RelationalExpression RPAREN Block ELSE Block 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 14");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Assignment ::= IDENTIFIER ASSIGNMENT Expression 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 13");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Assignment",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PrintStatement ::= PRINT LPAREN Expression RPAREN 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 12");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= ReturnStatement 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 11");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= FunctionDefinition 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 10");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= ForStatement 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 9");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= WhileStatement 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 8");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= IfStatement 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 7");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Assignment 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 6");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= PrintStatement 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 5");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // StatementList ::= 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 4");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // StatementList ::= Statement StatementList 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 3");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= LBRACE StatementList error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
    System.out.println("Block missing right brace on line: " + parser.getLine() + ": " + e);
    parser.errNo++;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= error StatementList RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
    System.out.println("Block missing left brace on line: " + parser.getLine() + ": " + e);
    parser.errNo++;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 2");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
    System.out.println("Program main block missing on line: " + parser.getLine() + ": " + e);
    parser.errNo++;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Block 
            {
              Object RESULT =null;
		
    System.out.println("Reduction 1");

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

